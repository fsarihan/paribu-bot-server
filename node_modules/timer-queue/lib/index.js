"use strict";

var _events = require("events");

var _sleepPromise = _interopRequireDefault(require("sleep-promise"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var defaultParams = {
  timeout: 0,
  interval: 0,
  retry: 0,
  retryInterval: 0,
  autoStart: false,
  startImmediately: false
};

var _next = Symbol('_next');

var _end = Symbol('_end');

var _error = Symbol('_error');

var _isRunning = Symbol('_isRunning');

var _isError = Symbol('_isError');

var isPromise = function isPromise(obj) {
  return !!obj && (_typeof(obj) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
};

var TimerQueue = /*#__PURE__*/function (_EventEmitter) {
  _inherits(TimerQueue, _EventEmitter);

  var _super = _createSuper(TimerQueue);

  function TimerQueue() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, TimerQueue);

    _this = _super.call(this);
    _this.queue = [];
    _this[_isRunning] = false;
    _this[_isError] = false;
    options = Object.assign({}, defaultParams, options);
    _this.timeout = options.timeout;
    _this.interval = options.interval;
    _this.retry = options.retry;
    _this.retryInterval = options.retryInterval;
    _this.autoStart = options.autoStart;
    _this.startImmediately = options.startImmediately;
    return _this;
  }

  _createClass(TimerQueue, [{
    key: "push",
    value: function push(fn) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (typeof fn !== 'function') {
        throw new TypeError('first argument must be a function');
      }

      if (typeof params === 'number') {
        params = {
          delay: params
        };
      }

      var isStartingWithEmptyQueue = this.queue.length === 0;
      this.queue.push(Object.assign({}, params, {
        fn: fn
      }));

      if (this.autoStart) {
        this.start({
          isStartingWithEmptyQueue: isStartingWithEmptyQueue
        });
      }

      return this;
    }
  }, {
    key: "start",
    value: function start() {
      var _this2 = this;

      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$isStartingWithEm = _ref.isStartingWithEmptyQueue,
          isStartingWithEmptyQueue = _ref$isStartingWithEm === void 0 ? true : _ref$isStartingWithEm;

      if (this[_isRunning]) {
        return;
      }

      if (this.queue.length <= 0) {
        this[_end]();

        return;
      }

      this[_isRunning] = true;
      this[_isError] = false;
      var runImmediately = this.startImmediately && (this.autoStart && this.queue.length === 1 && isStartingWithEmptyQueue || !this.autoStart && isStartingWithEmptyQueue);

      var _this$queue$shift = this.queue.shift(),
          fn = _this$queue$shift.fn,
          _this$queue$shift$del = _this$queue$shift.delay,
          delay = _this$queue$shift$del === void 0 ? 0 : _this$queue$shift$del,
          _this$queue$shift$ret = _this$queue$shift.retry,
          retry = _this$queue$shift$ret === void 0 ? this.retry : _this$queue$shift$ret,
          _this$queue$shift$ret2 = _this$queue$shift.retryInterval,
          retryInterval = _this$queue$shift$ret2 === void 0 ? this.retryInterval : _this$queue$shift$ret2,
          _this$queue$shift$ret3 = _this$queue$shift.retryCount,
          retryCount = _this$queue$shift$ret3 === void 0 ? 0 : _this$queue$shift$ret3,
          _this$queue$shift$err = _this$queue$shift.error,
          error = _this$queue$shift$err === void 0 ? function () {} : _this$queue$shift$err;

      var delayToUse = runImmediately ? 0 : delay;
      return (0, _sleepPromise["default"])(delayToUse).then(function () {
        var promises = [];
        var sync = fn && fn.length;

        if (sync) {
          promises.push(new Promise(function (resolve, reject) {
            fn.call(_this2, resolve, reject);
          }));
        } else {
          var result = fn.call(_this2);

          if (isPromise(result)) {
            promises.push(result);
          } else if (result === false) {
            promises.push(Promise.reject(new Error('return false')));
          } else {
            promises.push(Promise.resolve());
          }
        }

        if (_this2.timeout > 0) {
          promises.push((0, _sleepPromise["default"])(_this2.timeout).then(function () {
            return Promise.reject(new Error('timeout'));
          }));
        }

        Promise.race(promises)["catch"](function (e) {
          if (retryCount < retry) {
            _this2.queue.unshift({
              fn: fn,
              delay: delay,
              retry: retry,
              retryInterval: retryInterval,
              retryCount: retryCount + 1,
              error: error
            });

            return Promise.resolve(retryInterval);
          } else {
            return Promise.reject(e || new Error('error'));
          }
        }).then(function (interval) {
          _this2[_next](interval);
        })["catch"](function (e) {
          error.call(_this2, e);

          _this2[_error](e);
        });
      });
    }
  }, {
    key: "stop",
    value: function stop() {
      this[_isRunning] = false;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.queue.length = 0;
    }
  }, {
    key: _next,
    value: function value() {
      var _this3 = this;

      var interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.interval;

      if (this[_isRunning] && this.queue.length) {
        (0, _sleepPromise["default"])(interval).then(function () {
          _this3[_isRunning] = false;

          _this3.start({
            isStartingWithEmptyQueue: false
          });
        });
      } else {
        this[_end]();
      }
    }
  }, {
    key: _end,
    value: function value() {
      this[_isRunning] = false;
      this[_isError] = false;

      if (this.listenerCount('end') > 0) {
        this.emit('end');
      }
    }
  }, {
    key: _error,
    value: function value(err) {
      this[_isRunning] = false;
      this[_isError] = true;

      if (this.listenerCount('error') > 0) {
        this.emit('error', err);
      }
    }
  }, {
    key: "isRunning",
    get: function get() {
      return this[_isRunning];
    }
  }, {
    key: "isFailed",
    get: function get() {
      return this[_isError];
    }
  }]);

  return TimerQueue;
}(_events.EventEmitter);

module.exports = TimerQueue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,